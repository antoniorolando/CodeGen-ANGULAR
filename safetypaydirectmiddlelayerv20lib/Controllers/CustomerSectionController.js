/**
  *SafetyPayDirectMiddleLayerV20Lib
  *
  * This file was automatically generated by APIMATIC BETA v2.0 on 02/21/2016
  */

'use strict';
angular.module('SafetyPayDirectMiddleLayerV20Lib').factory('CustomerSectionController',function($q,Configuration,HttpClient,APIHelper){
    return{
        /**
         * Get a Customer By ID
         * @param {string} id    Required parameter: TODO: type description here
         *
         * @return {promise<Customer>}
         */
        getCustomersId : function(id){

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/customers/{id}";
            
            //Process template parameters
            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
                "id" : id
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "accept" : "application/json"
            };

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "GET",
                queryUrl : queryUrl,
                headers: headers,
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                if (code == 400) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Bad Request", errorCode: 400, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 401) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Not Authorized", errorCode: 401, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 402) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Request Failed", errorCode: 402, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 405) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Method not Allowed", errorCode: 405, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 500) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Error 500", errorCode: 500, errorResponse: result.message},result.getContext()));
                    return;
                } else {
                    deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
                }
            });
            
            return deffered.promise;
        },
        /**
         * Update Customer
         * @param {string} id    Required parameter: TODO: type description here
         * @param {Customer|null} body    Optional parameter: TODO: type description here
         *
         * @return {promise<Customer>}
         */
        putCustomersId : function(id, body){

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/customers/{id}";
            
            //Process template parameters
            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
                "id" : id
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "accept" : "application/json",
                "content-type" : "application/json; charset=utf-8"
            };

            //Remove null values
            APIHelper.cleanObject(body);

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "PUT",
                queryUrl : queryUrl,
                headers: headers,
                body : body
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                if (code == 400) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Bad Request", errorCode: 400, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 401) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Not Authorized", errorCode: 401, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 402) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Request Failed", errorCode: 402, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 405) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Method not Allowed", errorCode: 405, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 500) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Error 500", errorCode: 500, errorResponse: result.message},result.getContext()));
                    return;
                } else {
                    deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
                }
            });
            
            return deffered.promise;
        },
        /**
         * Delete a Customer
         * @param {string} id    Required parameter: TODO: type description here
         *
         * @return {promise<void>}
         */
        deleteCustomersId : function(id){

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/customers/{id}";
            
            //Process template parameters
            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
                "id" : id
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "DELETE",
                queryUrl : queryUrl,
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                if (code == 400) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Bad Request", errorCode: 400, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 401) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Not Authorized", errorCode: 401, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 402) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Request Failed", errorCode: 402, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 405) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Method not Allowed", errorCode: 405, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 500) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Error 500", errorCode: 500, errorResponse: result.message},result.getContext()));
                    return;
                } else {
                    deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
                }
            });
            
            return deffered.promise;
        }
    }
});